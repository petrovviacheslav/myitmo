@startuml

package lab3.world.person{



class Person
{
	+understand(before, after, between : Person) : void
	+sit(where : Place) : void
	+nod() : void
	+equals() : bool
	+toString() : String
	+hashCode() : int
	
}


}






package lab3.world{
abstract class Environment
{
	-name : String

}

class Nature {
	
	+equals() : bool
	+toString() : String
	+hashCode() : int
}

class River {

}

class Forest {
	+getIncludes() : void
}


class Time
{
		
	+equals() : bool
	+toString() : String
	+hashCode() : int
}
enum Day
{
Sunny
Drowsy
}


class Sound
{
	+equals() : bool
	+toString() : String
	+hashCode() : int
}

}

package lab3.blablabla{

enum Feelings 
{
Quietly
Well
Quiet
Unclear
Comfortable
}
enum Speech
{
Tell
Ask
}


interface Moveable{
move(room : Room) : void
}
interface Talkable
{
+say(type : Speech, message : String, to : Person) : void
}
interface Listanable
{
+listen(listeners : Person[], message : String) : void
}
interface Seer
{
+closeEyes() : void
+openEyes() : void
}
}
package lab3.world.place{

class Place
{	
	-peopleAbout : Person[]
	+addPerson(person : Person) : void
	+removePerson(person : Person) : void
	+equals() : bool
	+toString() : String
	+hashCode() : int
}

}



Talkable <|-- Environment
Environment <|-- Nature
Listanable <|-- Person
Moveable <|-- Person
Environment <|-- Person
Seer <|-- Person
Nature <|-- River
Nature <|-- Forest

Talkable <|-- Sound


@enduml